#!/bin/bash
# ~/.bashrc-alias -- included by ~/.bashrc IF INTERACTIVE
# by Paul Carman -- copyleft

# use $what to see the definition of a command
####################################

# !!! MIND aliases/functions when creating them -- this file is local to itself !!!
# !!! ALL external commands used here should prefix /bin/ !!!
####################################

# shellcheck disable=SC2155 # Declare and assign separately to avoid masking return values.

# This file should only be sourced IF INTERACTIVE
# These functions/aliases are NOT for export
# Routines here ASSUME pts (tty) and may output with COLOR
# These routines are subject to change and meant to be USER USE ONLY
####################################
[ dumb != "$TERM" ] && tabs 4 # change tab stop from 8

. "$(which Echo.sh)"

# a
####################################
apt-cache() {
   case "$1" in
      search) /bin/apt-cache "$@" \
                  | /bin/sort -V \
                  | /bin/grep -E "($(printf '%s|' "${@:2}")|\$)" ;;
      *) /bin/apt-cache "$@"
   esac
}

# b
####################################
alias bye='systemctl suspend'

# c
####################################
cal() { # compressed/highlighted calendar if vertical
   # ncal -b produces original broad cal output
   if [[ "$*" =~ '-b' ]]; then
      /bin/ncal "$@"
   else # this code does not handle horizontal -b output
      # first month does not need compressed
      # each day is given space for two digits unless in first row of month
      # month name starts on same column as single digit
      # number of spaces between months varies
      # ncal outputs a seven line rectangle
      # pty inserts carriage return (0x0d) before each newline (0x0a).
      local zColorCode=$'\x1b[^m]+m'
      local zDayNum="($zColorCode)?[ 0-9][0-9]($zColorCode)?"
      local zDayName="($zColorCode..$zColorCode|..)"
      local zBetweenMonthsInclusive="([0-9])   +( $zDayNum )"
      local zMonthTitle='([[:alpha:]]+ [0-9]{4})'
      pty /bin/ncal -A1 -B1 "$@" \
         | /bin/tr -d '\r' \
         | /bin/sed -E "#
; s:$zBetweenMonthsInclusive:\1\2:g
; s:^ *($zMonthTitle):\1:
; s:(  ( *$zMonthTitle)):\2:g
; s:($zMonthTitle) *$:\1:
; s:^(..)(.*($zColorCode).*($zColorCode).*):\3\1\4\2:
; s:^$zDayName(.*) $:\1\2\1:
; s:( [0-9][0-9])\1:\1:g
"
      # remove extra space between months
      # remove space before month title (misaligns titles)
      # remove extra space between month titles (misaligns titles)
      # remove spaces after moth titles
      # highlight current day of week
      # copy day of week to end of line
      # remove duplicate week numbers (if -w is used)
   fi
}
alias calligra='QT_SCALE_FACTOR=2 calligra'
alias calligrasheets='QT_SCALE_FACTOR=2 calligrasheets'
colors() {
	for i in {0..255}; do
		echo "$(tput setaf "$i")tput setaf $i$(tput sgr0)"
	done
}
alias cp='cp --archive --one-file-system --interactive --verbose'

# d
####################################
depends() { # list recursive package dependencies
  # may use apt-cache rdepends to list reverse dependencies
  apt-cache depends --recurse --no-recommends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances "$@" | grep "^\w" | sort -u
}
alias dd='sudo dd bs=8M status=progress'
df() { # sort output leaving header line
	/bin/df --human-readable \
               --output=target,fstype,size,pcent,avail,source "$@" \
		| awk 'NR<2{print $0;next}{print $0|"sort"}END{close("sort")}'
}
dict() { # use aspell if not found in dictionary
	local zDef
   if zDef=$(/bin/dict "$@" 2>/dev/null); then
      # emacs Shell mode reports syntax error
      less --force <(printf '%s' "$zDef") # why is --force required ???
   else
	   tput setaf 15
	   /bin/aspell pipe <<< "$@" \
         | /bin/tail -n +2 \
         | /bin/sed '1s/.*: //'
	   tput sgr0
   fi
}
alias du='du --total --human-readable --summarize'

# e
####################################
enscript() { # proper use enscript probably uses configuration files
   local zOptions
   while [[ - = "${1:0:1}" ]]; do
      zOptions+=("$1")
      shift
   done
	for zText in "$@"; do
      # do not reprocess a pdf or ps
      [[ "$zText" =~ .*"."(pdf|ps) ]] && continue
		/bin/enscript \
			--font="Courier@12/11" \
			--header="\$n|%W|Page \$% of \$=" \
			--margins=40:40:30:40 \
			--non-printable-format=caret \
			--output "$zText.ps" \
			--tabsize=3 \
			--word-wrap \
         "${zOptions[@]}" \
			"$zText" \
			&& ps2pdf "$zText.ps" \
         && /bin/rm -f "$zText.ps"
	done
}

# f
####################################
feh() {
   # --process-id %V is probably obtainable from predefined constant $PPID.
   # --fullscren prohibits window resizing (keyboard shortcut f)
   /bin/feh \
      --action ';fehaction --filename %F --filelist %L --filelist-count %l --image-format %t --filelist-index %u --image-height %h --image-width %w --image-size-human %S --process-id %V' \
      --auto-zoom \
      --borderless \
      --draw-tinted \
      --edit \
      --font DejaVuSansMono/16 \
      --fontpath /usr/share/fonts/truetype/dejavu \
      --force-aliasing \
      --fullscreen \
      --info "fehaction --info  -F %F" \
      --insecure \
      --image-bg checks \
      --keep-http \
      --no-jump-on-resort \
      --scale-down \
      --sort=filename "$@"
}
ff() { # play a list of songs with -autoexit
   readarray -t -d '' zSongs \
             < <(/bin/find "$@" -type f -print0 | sort -Vz)
   printf '%s\n' "${zSongs[@]}"
   for zSong in "${zSongs[@]}"; do
      /bin/ffplay -autoexit -v quiet "$zSong"
   done
}
alias ffcd='cd "$(dirname "$(fflog)")"'
alias ffhide='mv -v "$(fflog)" "$(dirname "$(fflog)")/.$(basename "$(fflog)")"'
alias ffmpeg='ffmpeg -v fatal -stats'
alias ffplay='ffplay -v 24 -stats'
alias ffprobe='ffprobe -hide_banner'
find() {
   /bin/find \
      -L "$1" \
      -xdev \
      -regextype posix-extended \
      "${@:2}"
}
findinode() { # INODE_NUMBER|FILE_NAME...
   local zDev zNode
   for z; do
      if [[ "$z" =~ ^[0-9]+$ ]]; then
         zNode="$z"
      else
         zNode=$(stat --printf '%i\n' "$z")
      fi
      zDev=mountdev "$zNode"
      sudo debugfs -R 'ncheck INODE' "$zDev"
   done
}

# g
####################################
__git-contains-option() { # POSSIBLE_OPTION...
   local z
   for z; do
      [[ '-' = "${z:0:1}" ]] && exit
   done
   return 1
}
git-clone() { # REPOSITORY [GITHUB_USERNAME:-PaulCarmanPro]
   if [[ 2 -lt "$#" ]] || __git-contains-option "$@"; then
      EchoErr "bashrc git-clone REPOSITORY [GITHUB_USERNAME:-PaulCarmanPro]" \
              "Clone a repositry into a child directory." \
              "Assgin url via git-remote." \
              "Note: You might want to use $ git clone..."
   else
      /bin/git clone --verbose \
               "https://github.com/${2:-PaulCarmanPro}/$1.git"
      cd "$1" || return
      git-remote "$1"
   fi
}
git-push() { # [REASON\n\nDETAIL:-update]
   if [[ 1 -lt "$#" ]] || __git-contains-option "$@"; then
      EchoErr "bashrc git-push [REASON:-update]" \
              "Add all new files, commit all changed files, pull, and push." \
              "Note: You might want to use $ git push..."
   else
      EchoNote 'git add --all'
      if /bin/git add --all --verbose \
            && EchoNote 'git pull --verbose...' \
            && /bin/git pull --verbose; then
         EchoNote 'git commit --all --message...'
         local zMsg=$(/bin/git commit \
                               --all \
                               --verbose \
                               --message "${1:-update}")
         EchoNote "$(sed '/^$/d' <<< "$zMsg")"
         if ! [[ "$zMsg" =~ 'Your branch is up to date' ]]; then
            EchoNote 'git push...'
            /bin/git push --verbose
         fi
      fi
   fi
}
git-remote() { # [GITHUB_USERNAME:-PaulCarmanPro]
   # assign the url -- should automate this in git-push
   if [[ 1 -lt "$#" ]] || __git-contains-option "$@"; then
      EchoErr "bashrc git-remote [GITHUB_USERNAME:-PaulCarmanPro]" \
              "Sets the URL origin into github.com." \
              "Note: You might want to use $ git remote..."
   else
      if [[ ! -e "$PWD/.git" ]]; then
         Error "\$PWD does not contain .git ($PWD)"
      else
         /bin/git remote --verbose set-url origin \
             "git@github.com:PaulCarmanPro/$(basename "$PWD").git"
      fi
   fi
}
alias grep='grep --color=always --text'
groups() {
	/bin/id --groups --name "$USER" | tr ' ' $'\n' | sort --version-sort | tr $'\n' ' ' | sed 's/ $/\n/'
}

# i
####################################
identify() {
   if [[ 1 -eq "$#" ]]; then
      echo "Shortened output... @see what identify..."
      /bin/identify -verbose "$@" | head -13
   else
      /bin/identify "$@"
   fi
}
alias inxi='inxi -v8' # maximum verbosity
iotop() {
   # setting NET_ADMIN does NOT work as described
   sudo /sbin/iotop --accumulated --delay 3 --only
}
ip() {
   if [[ 0 -eq $# ]]; then
      /bin/ip addr | sed -E ':a ; s/^[[:digit:]]+: ([^:]+:) (<[^>]+>)(.*( [[:upper:]]+))*.*/\1\4 \2/ ; :b ; N ; s/\n[[:space:]]+inet( [^ ]+).*$/\1/ ; tb ; s/\n[[:space:]]+.*$// ; tb ; P ; s/.*\n// ; ba'
   else
      /bin/ip "$@"
   fi
}
alias journalctl='journalctl --reverse'

# l
####################################
l() {
	# cause hidden files to be listed first and hide the totalsize
   # FUTURE : put the total between the hidden files and the visible files
	# shellcheck disable=SC2012 # Use find instead of ls to better handle non-alphanumeric filenames.
	# shellcheck disable=SC2016 # Expressions don't expand in single quotes, use double quotes for that.
	/bin/ls \
		--almost-all \
		--classify \
      --color \
      --dereference-command-line-symlink-to-dir \
		--format=long \
      --group-directories-first \
		--human-readable \
      --indicator-style=file-type \
		--time-style="+%y.%m.%d-%H.%M" "$@" \
      -v \
		| /bin/sed -nE '/^total.*/d ; /^([^[:blank:]]+[[:blank:]]+){6}(\x1b\[[^m]+m)*\./{p;b 1} ; H ; :1 ${g;s/^\n//;p}'
}
latex() {
	# zText.toc is ALWAYS one compilation behind
	# consider comparison of old/new zText.toc for automatic rebuild when table of contents changes
   # needs package texlive-latex-base (or will not have pdflatex)
	for zText in "$@"; do
		zText="${zText%.ltx}"
		# old-compilation buffers can cause new-compilation issues
		/bin/rm -f "$zText.aux"
		# /bin/pdflatex "%@" | sed -e :A -e 's/([^()]*)//;tA' -e 's/  / /g'
		# -aux-directory=DIR
		/bin/pdflatex -output-directory=/tmp "$zText.ltx"
		# this creates a dvi | ps | pdf -- consider pdflatex
		#/bin/latex "$zText.ltx" \
		#	&& dvips "$zText.dvi" \
		#	&& ps2pdf  "$zText.ps"
		/bin/mv -f "/tmp/$(basename "$zText").pdf" "$(dirname "$zText")"
	done
}
alias less='less --RAW-CONTROL-CHARS' # assist in color display, but less complains
lpoptions() {
   if [[ 0 = "$#" ]]; then
      # list one option per line instead of long space separated list
      printf '%s' "
-o collate true|false
-o media Letter

"
      /bin/lpoptions | sed -E 's/([^\]) ([^ ]+=)/\1\n\2/g'
   else
      /bin/lpoptions "$@"
   fi
}
alias lpstat='lpstat -l'
alias ls='ls \
--color \
--format=vertical \
--group-directories-first \
--indicator-style=file-type \
-v'
alias lsblk='lsblk \
-o FSTYPE,SIZE,FSUSED,NAME,LABEL,MOUNTPOINT,PARTLABEL'
lsusb() { # hide all the hubs from the basic list
   if [[ 0 = "$#" ]]; then
      /bin/lsusb | grep -v '.*[Hh]ub'
   else
      /bin/lsusb "$@"
   fi
}

# m
####################################
alias mkfs.ext4='mkfs.ext4 -z ""' # create an undo file default called mke2fs-device.e2undo for e2undo.
alias more='less'
mountdev() { # [-f FILE|MOUNTPOINT]
   # stdout EMPTY without error means VIRTUAL device (not in /dev)
   # if MOUNTPOINT (not -f is specified) then error if not directly a mountpoint
   # major number = driver (0=normal file)
   # minor number = device (0=normal file)
   # if major = 0 && minor != 0 then VIRTUAL device
   local zId
   if [[ '-f' = "$1" ]]; then
      shift
      # code 1 = file not found
      zId=$(stat --printf '%Hd:%Ld' "$1") || return
   else
      # mountpoint will error if not a mountpoint
      # code 32 = not a mountpoint
      # code 1 = file not found
      zId=$(/bin/mountpoint --fs-devno "$1") || return
   fi
   [[ 1 -lt "$#" ]] \
      && EchoErr "Ignoring extra arguments." \
                 "Only 1 -f FILE or MOUNTPOINT may be considered."
   # no output + code 0 = virtual device
   [[ "$zId" =~ ^0:[^0] ]] && return
   # locate device for major:minor via a search of /dev
   local zDev=$(stat --printf '%Hr:%Lr %n\n' /dev/* \
                   | /bin/sed -nE "s/^$zId //p")
   [[ "$zDev" ]] \
      && printf '%s\n' "$zDev" \
      && return
   EchoErr "Could not locate driver:device ${zId@Q}."
   return 2
}
mountpoint() { # [-c] DIR...
   # look up the mounted /dev file
   local -i zCode
   local zDev zPoint
   for zPoint; do
      if zDev=$(mountdev zPoint); then
         # @see $LS_COLORS 'bd=.*'
         printf '%s ' "${zDev:-VIRTUAL}"
         tput setaf 68
         printf '%s' "$zPoint"
         tput sgr0
         [[ -h "$zPoint" ]] \
            && tput setaf 11 \
            && printf ' -> %s' "$(realpath "$zPoint")" \
            && tput sgr0
      else
         zCode+=1
      fi
   done
   return $zCode
}
alias mp='mountpoint'
alias mp3gain='mp3gain -kpor -sr' # lower gain to avoid clip, output list, preserve timestamp, rewrite mp3, set recalculation flag
alias mupdf='mupdf 2>/dev/null -r 230'
alias mutt='neomutt'
alias mv='mv --interactive --verbose'

# n
####################################
neomutt() {
   export ESCDELAY=0 # default 1000, but now used instead of ^g
   /bin/neomutt "$@"
}
alias netstat='netstat --protocol=inet --program --timers'

# p
####################################
alias pgrep='pgrep --list-full'
alias ping='ping -v -c6'
pman() { # python man
   # this interesting code no longer works due to an upgrade
	f="/usr/lib/python3.10/$1.py"
	if [[ -e "$f" ]]; then
		x "$f"
	else
		>&2 echo "Did not find ${f@Q}."
		return 1
	fi
   # following code used to be separate
}
pman2() { # MODULE[.TOPIC] or TOPIC
   # this was originally called manp, but it is another version of pman
   case $# in
      1) /bin/python3 <(cat <<EOF
try: import ${1%%.*}
except Exception: pass
help('$1')
EOF
                       ) ;;
      *) >&2 echo "manp MODULE[.TOPIC] or TOPIC"
         return 1
   esac
}
ps() {
	# @@@ REASSIGN -a TO EXCLUDE THE grep @@@
	# list processes with job and heirichael information
   # shellcheck disable=SC2016 # don't bitch about use of asterisk inside single quotes
   [[ 0 -ne $# ]] \
      && echo '# [...] entries are hidden while rest are chopped @see `what ps`'
   local zo
   # shellcheck disable=SC2199 # arrays implicitly concatenate
   [[ " ${@}" =~ " -o" ]] \
      && unset zo \
         || zo="-o user,pid,ppid,pgid,tty,cmd"
   # shellcheck disable=SC2086 # double quote to prevent word splitting
	/bin/ps -H $zo "$@" \
      | /bin/cut -c -$(($(tput cols) - 1)) \
      | /bin/grep -vE '\[.+\]'
   # -H Show process hierarchy
}
alias py='python3' # python lacks the ability to use the latest

# r
####################################
alias rm='rm --interactive --one-file-system --recursive --verbose'
alias rsync='rsync --archive --itemize-changes' # --checksum fixes date issues with vfat destination

# s
####################################
scan() {
   if [[ 0 -eq $# ]]; then
      echo 'scanimage FILENAME
.PBM for black-and-white (--mode Lineart) (do not use -- looks bad and produces a pnm anyway)
.PGM for grayscale (--mode Gray)
.PPM for color (--mode Color)
.TIFF|.PNG|.JPEG (compression level 75)'
      /bin/scanimage --all-options --dont-scan
   else
      # need to use the lesser arguments too
      /bin/scanimage --progress --resolution 300 -y 280 --mode=Gray --format=pnm -o ${!#}.pgm
   fi
}
alias screenshot='scrot --select --quality 100'
alias shutdown='shutdown +0' # immediate
alias slimjet='flashpeak-slimjet' # must use startup script

# t
####################################
alias top='htop' # pcp top is supposed to be configurable?
alias tree='tree -aChv --du' # list all with human readable sizes accumulated for directories
alias traceroute='traceroute -n' # do not attempt to resolve DNS on every router
alias uptime='uptime --since'
alias unit='units -v1'

# w
####################################
what() { # COMMAND...
   local -i zCode=0 # how many not found
   while [[ 1 -le "$#" ]]; do
      local zCmd="$1"
      shift
      local zFound # no answer was found # examined by whatPackage
	   if [[ "$zCmd" =~ '*' ]]; then # search pattern in $PATH
		   # the -P ignores links... good for /bin and /sbin,, but bad at ~/,local/bin
		   IFS=:; # shellcheck disable=SC2086
         local zAns="$(/bin/find \
                         -L $PATH \
                         -maxdepth 1 \
                         -type f \
                         -name "$zCmd" \
                         -printf '\n%p' \
                         2>/dev/null)"
         unset IFS
         [[ "$zAns" ]] \
            && printf '%s\n' "$(sort -V <<< "$zAns")" \
            && zFound=t
	   else
         whatBuiltin "$zCmd" && zFound=t
         whatDeclare "$zCmd" && zFound=t
         whatAlias "$zCmd" && zFound=t
         whatDoc "$zCmd" && zFound=t
         whatPackage "$zCmd" && zFound=t
         whatDesc "$zCmd" && zFound=t
         [[ -z "$zFound" ]] \
            && zCode+=1 \
            && EchoErr "Count not find command ${zCmd@Q}."
         fi
	      done
   return $zCode
}
__what() { # [-r] LABEL RESULT
   if [[ '-r' = "$1" ]]; then
      tput setaf 9
      shift
   else
      tput setaf 10
   fi
   printf '%s:' "$1"
   tput sgr0
   printf ' %s\n' "$2"
}
whatAlias() { # COMMAND
   # use bash alias to determine alias declaration
   local zAlias
   zAlias=$(alias "$1" 2>/dev/null) || return
   __what 'bash alias' "${zAlias#alias }"
}
whatBuiltin() { # COMMAND
   # check for bash built-in
   /bin/grep -Fxq "$1" <(compgen -b) || return
   __what 'bash built-in' "$(help "$1")"
}
whatDeclare() { # COMMAND
   # use bash declare to determine function declaration
   local zDeclare
   zDeclare=$(declare -f "$1") || return
   __what 'bash function' "$zDeclare"
}
whatDesc() { # COMMAND
   # use whatis to attain a one-liner description
   local zDesc
   zDesc=$(whatis "$1" 2>/dev/null | tr -s ' ') || return
   [[ "$zDesc" ]] || return # whatis does not produce an error code
   [[ "$zDesc" =~ ^([^-]+)" - "(.+)$ ]]
   __what "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}"
}
whatDoc() { # COMMAND
   # display info files after man files, but do not show duplicates
   local zCode=1
   local z zMans zInfo
   zInfo=$(/bin/info -w "$1" 2>/dev/null | grep -xv '\*manpages\*' )
   # use whereis to locate binaries and man file locations
   # man files commonly in /usr/share/man/ @see /etc/manpath.config
   while read -r zHeader zArgs; do
      ### deliberately uses local alias-function `l' to list files
		if zMans=$(/bin/whereis $zArgs "$1") \
            && zMans=${zMans/$1:} \
            && [[ "$zMans" ]]; then
         local z
         for z in ${zMans/ }; do
            [[ "$zInfo" != "$z" ]] \
               && __what "$zHeader" "$(l -d "$z")" \
               && zCode=0
         done
      fi
   done <<< $'exec -b\nman -m\ncode -s' # list of [HEADER whtereis_OPTIONS]...
   # display info files
   if [[ "$zInfo" ]]; then
      __what 'info' "$(l -d "$zInfo")"
      zCode=0
   fi
   # other documentation
   local zDoc="/usr/share/doc/$1"
   if [[ -e "$zDoc" ]]; then
      local zHtml="$zDoc/index.html"
      if [[ -e "$zHtml" ]]; then
         __what 'html' "$zHtml (clipboard)"
         printf '%s' "$zHtml" | xclip -selection clipboard
      else
         __what 'doc' "$zDoc"
      fi
   fi
   return $zCode
}
whatPackage() { # COMMAND
   # use apt-file to search packages (not all that great of an idea)
   local zAns
   tput sc
   echo -n 'searching files destined for \$PATH or /opt...'
   zAns="$(/bin/apt-file find --regexp "/$1$" | /bin/grep -E "($(tr : '|' <<< "$PATH")|/opt.*)/$1")"
   tput rc
   tput el
   if [[ "$zAns" ]]; then
      while IFS= read -r z; do
         if [[ "$z" =~ ^(.*):\ (.*) ]]; then
            if [[ -e "${BASH_REMATCH[2]}" ]]; then
               __what "pkg ${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}"
            else
               __what -r "!pkg ${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}"
            fi
         fi
      done <<< "$zAns"
   else
      [[ -z "$zFound" ]] \
         && EchoNote "Obscure packages may create executables during install."
      return 1
   fi
   return 0
}

alias wget='wget --continue --convert-links --force-directories --limit-rate=20K --mirror --no-parent --tries=3 --user-agent=Mozilla --wait=20 --xattr' # --domains= to limit source
# --force-directories = use option -f when executing mkdir
# --limit-rate = bandwidth niceness
# --mirror = recursively download and timestamp (-r -N -l inf --no-remove-listing)
# --no-parent = do not ascent hierarchy
# --user-agent = identify myself as Mozilla for trickery
# --wait = niceness pause between retrievals
# --xattr = store URL and the Referer HTTP header value (if used) in file's extended attributes

# x
####################################
alias xev='xev -rv' # reverse video looks cooler
alias xclip='xclip -selection clipboard' # always using clipboard (not primary or secondary)
alias xdvi='xdvi -bg black -fg bisque' # color names in /usr/share/texlive/texmf-dist/tex/latex/css-colors/css-colors.sty
# alias xrandr='xrandr --output HDMI-1' # have only the one monitor

# y
####################################
# alias yt-dlp='yt-dlp --rm-cache-dir'
# fixes HTTP Error 403: Forbidden if caused by unexpected interruption
zYtCount=16 # was originally 16
#shellcheck disable=SC2139 # this expands when defined, not when executed 
alias yt-dlp="yt-dlp \
 --external-downloader=aria2c\
 --external-downloader-args\
 '--min-split-size=1M\
 --max-connection-per-server=$zYtCount\
 --max-concurrent-downloads=$zYtCount\
 --split=$zYtCount'"
# accelerates download via parallel downloads
# youtube hasn't throttled me yet, but Error 403 is strong
# --min-split-size must be 1M or higher. Files smaller than 2x min-split-size will be downloaded through a single connection. Modify aria2 source code to allow smaller values.
# yt-dlp downloads after video, rather than concurrently with video.
